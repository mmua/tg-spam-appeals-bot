"""Telegram bot handlers for the Appeals Bot."""

import logging

from telegram import Update, Message
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from .config import config
from .database import get_db_manager, Appeal
from .services import unban_service
from .utils import format_user_mention, validate_appeal_text, format_datetime

logger = logging.getLogger(__name__)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /start command."""
    if not update.message or not update.effective_user:
        return

    welcome_message = """
ü§ñ **–ë–æ—Ç F1News.ru –¥–ª—è –ø–æ–¥–∞—á–∏ –∞–ø–µ–ª–ª—è—Ü–∏–π**

–ï—Å–ª–∏ –≤–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ F1 –∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ –æ—à–∏–±–∫–æ–π, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∞–ø–µ–ª–ª—è—Ü–∏—é –∑–¥–µ—Å—å.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/appeal [–≤–∞—à–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ]`

**–ü—Ä–∏–º–µ—Ä:**
`/appeal –Ø –æ–±—Å—É–∂–¥–∞–ª –≥–æ–Ω–æ—á–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –•—ç–º–∏–ª—Ç–æ–Ω–∞, –∞ –Ω–µ –æ—Å–∫–æ—Ä–±–ª—è–ª. –≠—Ç–æ –±—ã–ª–∞ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–∞—Å—Ç–Ω–∞—è –¥–∏—Å–∫—É—Å—Å–∏—è –æ F1.`

–ê–ø–µ–ª–ª—è—Ü–∏–∏ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/appeal [—Ç–µ–∫—Å—Ç]` - –ü–æ–¥–∞—Ç—å –∞–ø–µ–ª–ª—è—Ü–∏—é
‚Ä¢ `/status` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–ø–µ–ª–ª—è—Ü–∏–π
‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """

    await update.message.reply_text(welcome_message, parse_mode=ParseMode.MARKDOWN)
    logger.info(f"Start command used by user {update.effective_user.id}")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /help command."""
    await start_command(update, context)


async def appeal_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /appeal command."""
    if not update.message:
        return

    if not context.args:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –∞–ø–µ–ª–ª—è—Ü–∏–∏.\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/appeal –Ø –æ–±—Å—É–∂–¥–∞–ª –≥–æ–Ω–æ—á–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é F1, –∞ –Ω–µ –æ—Å–∫–æ—Ä–±–ª—è–ª.`",
            parse_mode=ParseMode.MARKDOWN,
        )
        return

    appeal_text = " ".join(context.args)
    await _handle_appeal_submission(update.message, context, appeal_text)


async def _handle_appeal_submission(
    message: Message, context: ContextTypes.DEFAULT_TYPE, appeal_text: str
) -> None:
    """Common logic for processing an appeal submission from a message."""
    user = message.from_user
    if not user:
        return

    user_id = user.id
    username = user.username
    first_name = user.first_name

    # Validate appeal text
    is_valid, error_msg = validate_appeal_text(appeal_text)
    if not is_valid:
        await message.reply_text(f"‚ùå {error_msg}")
        return

    # Check if user is actually banned in the main group
    try:
        chat_member = await context.bot.get_chat_member(config.main_group_id, user_id)
        if chat_member.status != "kicked":
            await message.reply_text(
                "‚ÑπÔ∏è –í—ã –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –≥—Ä—É–ø–ø–µ F1News.ru. "
                "–ê–ø–µ–ª–ª—è—Ü–∏–∏ –º–æ–≥—É—Ç –ø–æ–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏."
            )
            return
    except Exception as e:
        logger.error(f"Failed to check user ban status: {e}")
        await message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à —Å—Ç–∞—Ç—É—Å –≤ –≥—Ä—É–ø–ø–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
        )
        return

    # Check if user already has pending appeal
    existing_appeal = get_db_manager().get_pending_appeal(user_id)
    if existing_appeal:
        await message.reply_text(
            f"‚è≥ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∞–ø–µ–ª–ª—è—Ü–∏—è (#{existing_appeal.id}). "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        return

    # Create new appeal
    appeal_data = {
        "user_id": user_id,
        "username": username,
        "first_name": first_name,
        "appeal_text": appeal_text,
    }

    try:
        appeal_id = get_db_manager().create_appeal(appeal_data)
        appeal = get_db_manager().get_appeal(appeal_id)  # Get the created appeal object

        # Notify user
        await message.reply_text(
            f"‚úÖ –ê–ø–µ–ª–ª—è—Ü–∏—è –ø–æ–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\nID –∞–ø–µ–ª–ª—è—Ü–∏–∏: #{appeal_id}\n\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –≤–∞—à–µ –¥–µ–ª–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."
        )

        # Notify admins
        if appeal:  # Check if appeal is not None
            admin_message = _format_admin_notification(appeal_id, appeal)
            await context.bot.send_message(
                chat_id=config.admin_group_id,
                text=admin_message,
                parse_mode=ParseMode.MARKDOWN,
            )

        logger.info(f"Appeal #{appeal_id} created for user {user_id}")

    except Exception as e:
        logger.error(f"Failed to create appeal: {e}")
        await message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∞—Ç—å –∞–ø–µ–ª–ª—è—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
        )


async def edited_message_handler(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """React to edits of messages; process edited /appeal submissions."""
    if not update.edited_message or not update.edited_message.text:
        return
    text = update.edited_message.text.strip()
    if not text.startswith("/appeal"):
        return

    # Extract text after the command, supporting forms like /appeal@BotName
    first_token = text.split(maxsplit=1)[0]
    appeal_text = text[len(first_token):].strip()

    if not appeal_text:
        await update.edited_message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∞–ø–µ–ª–ª—è—Ü–∏–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã `/appeal`.",
            parse_mode=ParseMode.MARKDOWN,
        )
        return

    await _handle_appeal_submission(update.edited_message, context, appeal_text)


async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /status command."""
    if not update.effective_user or not update.message:
        return

    user_id = update.effective_user.id
    appeals = get_db_manager().get_user_appeals(user_id)

    if not appeals:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–ø–µ–ª–ª—è—Ü–∏–π.")
        return

    message = "üìã **–í–∞—à–∏ –∞–ø–µ–ª–ª—è—Ü–∏–∏:**\n\n"
    for appeal in appeals[:5]:  # Show last 5 appeals
        status_emoji = {"pending": "‚è≥", "approved": "‚úÖ", "rejected": "‚ùå"}.get(
            appeal.status, "‚ùì"
        )

        message += f"{status_emoji} **#{appeal.id}** - {appeal.status.title()}\n"
        message += f"üìÖ {format_datetime(appeal.created_at)}\n"
        if appeal.admin_decision:
            message += f"üí¨ {appeal.admin_decision}\n"
        message += "\n"

    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)


# Admin commands (only work in admin group)


async def approve_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /approve command (admin only)."""
    if not update.effective_chat or not update.message or not update.effective_user:
        return

    if update.effective_chat.id != config.admin_group_id:
        return

    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∞–ø–µ–ª–ª—è—Ü–∏–∏: `/approve 123`", parse_mode=ParseMode.MARKDOWN
        )
        return

    try:
        appeal_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∞–ø–µ–ª–ª—è—Ü–∏–∏.")
        return

    # Get appeal details
    appeal = get_db_manager().get_appeal(appeal_id)
    if not appeal:
        await update.message.reply_text("‚ùå –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if appeal.status != "pending":
        await update.message.reply_text(
            f"‚ùå –ê–ø–µ–ª–ª—è—Ü–∏—è #{appeal_id} —É–∂–µ {appeal.status}."
        )
        return

    # Try to unban user using PTB API via service
    unban_result = await unban_service.unban_user(context.bot, appeal.user_id)

    if unban_result.get("ok"):
        # Update appeal status
        admin_decision = "–û–¥–æ–±—Ä–µ–Ω–∞"
        success = get_db_manager().update_appeal_status(
            appeal_id, "approved", admin_decision
        )

        if success:
            await update.message.reply_text(
                f"‚úÖ –ê–ø–µ–ª–ª—è—Ü–∏—è #{appeal_id} –æ–¥–æ–±—Ä–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {appeal.first_name} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
            )

            # Notify user
            if appeal:  # Check if appeal is not None
                await _notify_user_decision(context, appeal, "approved", admin_decision)
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–ø–µ–ª–ª—è—Ü–∏–∏.")
    else:
        error_msg = unban_result.get("description", "Unknown error")
        await update.message.reply_text(f"‚ùå Failed to unban user. Error: {error_msg}")


async def reject_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /reject command (admin only)."""
    if not update.effective_chat or not update.message or not update.effective_user:
        return

    if update.effective_chat.id != config.admin_group_id:
        return

    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∞–ø–µ–ª–ª—è—Ü–∏–∏: `/reject 123 [–ø—Ä–∏—á–∏–Ω–∞]`",
            parse_mode=ParseMode.MARKDOWN,
        )
        return

    try:
        appeal_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∞–ø–µ–ª–ª—è—Ü–∏–∏.")
        return

    reason = (
        " ".join(context.args[1:]) if len(context.args) > 1 else "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    )

    # Get appeal details
    appeal = get_db_manager().get_appeal(appeal_id)
    if not appeal:
        await update.message.reply_text("‚ùå –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if appeal.status != "pending":
        await update.message.reply_text(
            f"‚ùå –ê–ø–µ–ª–ª—è—Ü–∏—è #{appeal_id} —É–∂–µ {appeal.status}."
        )
        return

    # Update appeal status
    # Do not expose admin identity to users; store neutral decision text only
    admin_decision = f"–û—Ç–∫–ª–æ–Ω–µ–Ω–∞: {reason}"
    success = get_db_manager().update_appeal_status(
        appeal_id, "rejected", admin_decision
    )

    if success:
        await update.message.reply_text(f"‚ùå –ê–ø–µ–ª–ª—è—Ü–∏—è #{appeal_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

        # Notify user
        if appeal:  # Check if appeal is not None
            await _notify_user_decision(context, appeal, "rejected", admin_decision)
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–ø–µ–ª–ª—è—Ü–∏–∏.")


async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /info command (admin only)."""
    if not update.effective_chat or not update.message:
        return

    if update.effective_chat.id != config.admin_group_id:
        return

    if not context.args:
        await update.message.reply_text(
            "‚ùå Please provide appeal ID: `/info 123`", parse_mode=ParseMode.MARKDOWN
        )
        return

    try:
        appeal_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∞–ø–µ–ª–ª—è—Ü–∏–∏.")
        return

    # Get appeal details
    appeal = get_db_manager().get_appeal(appeal_id)
    if not appeal:
        await update.message.reply_text("‚ùå –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    info_message = _format_appeal_info(appeal)
    await update.message.reply_text(info_message, parse_mode=ParseMode.MARKDOWN)


async def pending_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /pending command (admin only)."""
    if not update.effective_chat or not update.message:
        return

    if update.effective_chat.id != config.admin_group_id:
        return

    pending_appeals = get_db_manager().get_pending_appeals()

    if not pending_appeals:
        await update.message.reply_text("‚úÖ No pending appeals.")
        return

    message = "‚è≥ **Pending Appeals:**\n\n"
    for appeal in pending_appeals:
        user_mention = format_user_mention(appeal.first_name, appeal.username)
        message += (
            f"#{appeal.id} - {user_mention} - {format_datetime(appeal.created_at)}\n"
        )

    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)


async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /stats command (admin only)."""
    if not update.effective_chat or not update.message:
        return

    if update.effective_chat.id != config.admin_group_id:
        return

    stats = get_db_manager().get_appeals_stats()

    message = (
        f"üìä **Appeals Statistics**\n\n**Total Appeals:** {stats.get('total', 0)}\n\n"
    )

    for status in ["pending", "approved", "rejected"]:
        count = stats.get(status, 0)
        if count > 0:
            emoji = {"pending": "‚è≥", "approved": "‚úÖ", "rejected": "‚ùå"}[status]
            message += f"{emoji} **{status.title()}:** {count}\n"

    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)


# Helper functions


def _format_admin_notification(appeal_id: int, appeal: Appeal) -> str:
    """Format admin notification message."""
    user_mention = format_user_mention(appeal.first_name, appeal.username)

    return f"""
üÜï **–ù–æ–≤–∞—è –∞–ø–µ–ª–ª—è—Ü–∏—è** #{appeal_id}

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_mention}
üÜî **ID:** `{appeal.user_id}`
üìù **–ê–ø–µ–ª–ª—è—Ü–∏—è:** {appeal.appeal_text}

**–î–µ–π—Å—Ç–≤–∏—è:**
‚Ä¢ `/approve {appeal_id}` - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ `/reject {appeal_id} [–ø—Ä–∏—á–∏–Ω–∞]` - –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∞–ø–µ–ª–ª—è—Ü–∏—é
‚Ä¢ `/info {appeal_id}` - –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
    """


def _format_appeal_info(appeal: Appeal) -> str:
    """Format appeal information message."""
    user_mention = format_user_mention(appeal.first_name, appeal.username)

    info = f"""
üìã **Appeal #{appeal.id}**

üë§ **User:** {user_mention}
üÜî **User ID:** `{appeal.user_id}`
üìÖ **Submitted:** {format_datetime(appeal.created_at)} UTC
üìù **Appeal Text:** {appeal.appeal_text}
üîÑ **Status:** {appeal.status}
    """

    if appeal.admin_decision:
        info += f"‚öñÔ∏è **Admin Decision:** {appeal.admin_decision}\n"

    if appeal.processed_at:
        info += (
            f"‚úÖ **Processed:** {appeal.processed_at.strftime('%Y-%m-%d %H:%M UTC')}\n"
        )

    return info


async def _notify_user_decision(
    context: ContextTypes.DEFAULT_TYPE,
    appeal: Appeal,
    decision: str,
    admin_decision: str,
) -> None:
    """Notify user about appeal decision."""
    try:
        if decision == "approved":
            message = f"""
‚úÖ –û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –í–∞—à–∞ –∞–ø–µ–ª–ª—è—Ü–∏—è #{appeal.id} –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ F1News.ru. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.
            """
        else:  # rejected
            reason = (
                admin_decision.split(": ", 1)[1]
                if ": " in admin_decision
                else "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            )
            message = f"""
‚ùå –í–∞—à–∞ –∞–ø–µ–ª–ª—è—Ü–∏—è #{appeal.id} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.

**–ü—Ä–∏—á–∏–Ω–∞:** {reason}

–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∞–ø–µ–ª–ª—è—Ü–∏—é, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.
            """

        await context.bot.send_message(
            chat_id=appeal.user_id, text=message, parse_mode=ParseMode.MARKDOWN
        )

    except Exception as e:
        logger.error(f"Failed to notify user {appeal.user_id}: {e}")
